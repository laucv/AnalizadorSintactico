
options {Ignore_Case = true; }

PARSER_BEGIN (Analizador)
public class Analizador {

public static void main (String [] args) throws ParseException {
Analizador anLexSint = new Analizador (System.in);
anLexSint.anProgram();
System.out.println("Fichero analizado");
System.out.println("No se han detectado errores léxico-sintácticos");
}}
PARSER_END (Analizador)

void anProgram():             {} {   <programa> <id> ";" anConstant() anVariable() anSubprogram() anCuerpo() <punto> <EOF>  }
           
void anConstant():              {} { [<constante> (<id> <asignar> (<id> |
																  anCteAnonima() ) ";")+ ] }

void anVariable():              {} { [<variable> (<id> [<asignarVar> anCteAnonima() ]( <coma> <id> [<asignarVar> anCteAnonima() ] )* asignaTipo()  ";")* ] }

void anSubprogram():              {} { (<subPrograma> <id> parentesis()  [ asignaTipo() ] ";" anCuerpo() ";" )* }
																										  


void asignaTipo(): 		{} {":" anTipoPrimitivo()  }

void anCuerpo(): {} { <inicio> operacion() funcionRetorno() <fin>}

void parentesis(): {} { [<parAbrir> <id>[asignaTipo()] ( <coma> <id> [asignaTipo()] )* <parCerrar> ]}

void funcionRetorno(): {} { [<retorno> anCteAnonima() ";"] }

void operacion(): {} { ( ( <id> (anAsignacion()   | anLlamadaSub() 	) )| 
															anLectura()		|  
															anEscritura() 	)* }
void anTipoPrimitivo():       {} {   <entero>
                                     |<real>  
                                     |<cad> 
                                     |<logico> 
                                     |<car> }
                                     

void anLectura():           {} {   <leer> <parAbrir> <id> ( <coma> <id> )* <parCerrar> ";"       }					 
									 
void anEscritura():      {} {  <escribir> <parAbrir> [ anExp() ( <coma> anExp() )* ] <parCerrar>  ";"      }

void anAsignacion(): {} { <asignarVar> anExp() ";"}

void anLlamadaSub(): {} { <parAbrir> [ <id> ( <coma> <id> )* ] <parCerrar> ";"}								   
								   
void anCteAnonima():              {} {   <cteEntera>
                                  |<cteReal>
                                  |anLiteralLogico()	
                                  |<literalCadena>	
                                  |<literalCaracter> }
                                                                                                                             
void anLiteralLogico(): {} { <verdad> | <mentira> }
void anExp(): 				{} { anTermino1() [anOperando3() anExp()]													}

void anTermino1(): 				{} { anTermino2() [anOperando2() anTermino1()]												}

void anTermino2():				{} { anFactor() [anOperando1() anTermino2()]												}

void anFactor(): 				{} { ( <parAbrir> anExp() <parCerrar> ) | <id> | anCteAnonima() 		 					}

void anOperando1():				{} { <operadorAND> | <operadorPor> | <operadorEntre>										}
 
void anOperando2():				{} { <operadorOR> | <operadorMenos> | <operadorMas>											}

void anOperando3(): 			{} { <opIgual> | <opDistinto> | <opMayor> | <opMenor> | <opMayorI> | <opMenorI>				}

TOKEN: { < # letramin: ["a"-"z","ñ"] > }
TOKEN: { < # letramay: ["A"-"Z","Ñ"] > }
TOKEN: { < # letras: ["A"-"Z","Ñ","a"-"z","ñ"] > }
TOKEN: { < # sincero: ["1"-"9"]> } 
TOKEN: { < # digito: ["0"-"9"]> } 
TOKEN: { < # entera: ("0"<sincero>(<digito>)*)| "0"|( <sincero>(<digito>)*) > }
TOKEN: { < # caracter: ~["'"]>  }
TOKEN: { < # finLinea: "\n"|"\r\n">  } 
TOKEN: { < # blancos: ["\t"," "]>  } 
TOKEN: { < # comentario: "//" > }
TOKEN: { < # cadena: (~["\n","\r"]) | ("\\\"") >  }
TOKEN: { < # comen: ~["\n","\r"]>  }


TOKEN: { < entero : "integer" >                                             |                           	   
         < real : "double" >                                                |
		 < cad : "String" >                                             	|	
		 < logico : "boolean" >                                             |
		 < car : "char" >                                              		|	
		 < programa: "PROGRAMA"	>											|
		 < constante: "CONSTANTES" >  										|
		 < variable: "VARIABLES" >  										|
		 < subPrograma: "SUBPROGRAMA" >										|
		 < inicio: "INICIO"	>											    |		
		 < fin: "FIN"	>											  		|
		 < retorno: "return"	>											|	              
         < cteEntera : <entera> >                                           |                                    
         < cteReal : <entera> <punto> (<digito>)+  >                 		|
		 < verdad: "TRUE" >													|
		 < mentira: "FALSE" >												|
		 < literalCaracter: ("'" <caracter> "'") | ("'" "\\'" "'") > 		|
		 < literalCadena: "\"" (<cadena>)* "\"" >	| 
		 < leer: "LEER" > 													|
		 < escribir: "ESCRIBIR" >											|
		 < parAbrir: "(" > 													|
		 < parCerrar: ")" >													|
		 < asignar: "=" > 													|
		 < asignarVar: ":=" >												|
		 < coma: "," >														|
		 < punto: "." >														|
		 < operadorAND: "AND" >												  |
		 < operadorOR: "OR" >												  |
		 < operadorMas: "+" >											 	  |
		 < operadorMenos: "-" >												  |
		 < operadorPor: "*" >												  |
		 < operadorEntre: "/" >												  |
		 < opIgual:"=="	>													  |
		 < opDistinto: "<>" >												  |
		 < opMayor: ">" >												  	  |	
		 < opMenor: "<" >												      |
		 < opMenorI: "<=" >											  		  |
		 < opMayorI: ">=" >											  		  |
		 < id : <letras> (<letras>|"_" |<digito>)* > 						}    
		                                          
 SKIP:  {< " " | "\t" | "\n" | "\r\n" | "\r" | (<comentario> (<comen>)+) >    }  