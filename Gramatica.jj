
options {Ignore_Case = true; }

PARSER_BEGIN (Analizador)
public class Analizador {

public static void main (String [] args) throws ParseException {
Analizador anLexSint = new Analizador (System.in);
anLexSint.anProgram();
System.out.println("Fichero analizado");
System.out.println("No se han detectado errores léxico-sintácticos");
}}
PARSER_END (Analizador)

void anProgram():             {} {   <programa> <id> ";" anConstant() anVariable() anSubprogram() <EOF>  }
           
void anConstant():              {} { [<constante> (<id> <asignar> (<id> |
																  anExp() ) ";")+ ] }

void anVariable():              {} { [<variable> <idVar> [<asignarVar> [<idVar> |
																		anExp() ] ( <coma> <idVar> [<asignarVar> [<idVar> |
																												  anExp() ] ] )* ] ":" anTipoPrimitivo() ] ";" }

void anSubprogram():              {} { [<subPrograma> <id> (<parAbrir> (<id>)(asignaTipo())* ";" )* <inicio> ( anAsignacion() | 
																										  anLlamadaSub() 	| 
																										  anLectura()		| 
																										  anEscritura() 	)* <retorno> anExp() <fin> <punto> ] }
																										  
void asignaTipo(): 		{} {":" anTipoPrimitivo() }

void anTipoPrimitivo():       {} {   <entero>
                                     |<real>  
                                     |<cadena> 
                                     |<logico> 
                                     |<caracter> }
                                     

void anLectura():           {} {   <leer> <parAbrir> [ <id> ( <coma> <id> )* ] <parCerrar>        }					 
									 
void anEscritura():      {} {  <escribir> <parAbrir> [ <id> ( <coma> <id> )* ] <parCerrar>         }		

void anAsignacion(): {} { <idVar> <asignarVar> anExp() ";"}

void anLlamadaSub(): {} { <id> <parAbrir> [ <id> ( <coma> <id> )* ] <parCerrar> }								   
								   
void anExp():              {} {   <cteEntera>
                                  |<cteReal>
                                  |anLiteralLogico()	
                                  |<literalCadena>	
                                  |<literalCaracter> }
                                                                                                                             
void anLiteralLogico(): {} { <verdad> | <mentira> }

TOKEN: { < # letramin: ["a"-"z","ñ"] > }
TOKEN: { < # letramay: ["A"-"Z","Ñ"] > }
TOKEN: { < # letras: ["A"-"Z","Ñ","a"-"z","ñ"] > }
TOKEN: { < # sincero: ["1"-"9"]> } 
TOKEN: { < # digito: ["0"-"9"]> } 
TOKEN: { < # entera: ("0"<sincero>(<digito>)*)| "0"|( <sincero>(<digito>)*) > }
TOKEN: { < # alfabetosintab: ~["\t","\n","\r"]>  } 
TOKEN: { < # finLinea: "\n"|"\r\n">  } 
TOKEN: { < # blancos: ["\t"," "]>  } 
TOKEN: { <  #comentario: "//" > }


TOKEN: { < entero : "integer" >                                             |                           	   
         < real : "double" >                                                |
		 < cadena : "String" >                                              |	
		 < logico : "boolean" >                                             |
		 < caracter : "char" >                                              |	
		 < programa: "PROGRAMA"	>											|
		 < constante: "CONSTANTES" >  										|
		 < variable: "VARIABLES" >  										|
		 < subPrograma: "SUBPROGRAMA" >										|
		 < inicio: "INICIO"	>											    |		
		 < fin: "FIN"	>											  		|
		 < retorno: "return"	>											|	              
         < cteEntera : <entera> >                                           |                                    
         < cteReal : <entera> <punto> (<digito>)+  >                 		|
		 < verdad: "TRUE" >													|
		 < mentira: "FALSE" >												|
		 < literalCaracter: "\'" <alfabetosintab> "\'" > 					|
		 < literalCadena: "\"" (<alfabetosintab>)* "\"" >					| 
		 < leer: "LEER" > 													|
		 < escribir: "ESCRIBIR" >											|
		 < parAbrir: "(" > 													|
		 < parCerrar: ")" >													|
		 < asignar: "=" > 													|
		 < asignarVar: ":=" >												|
		 < coma: "," >														|
		 < punto: "." >														|
		 < suma: "+" >   													|
		 < resta: "-" >   													|
		 < mult: "*" >   													|
		 < div: "/" >   													|
		 < idVar: <letramin> >   											|
		 < id : <letras> (<letras>|"_" |<digito>)* > 						}    
		                                          
 SKIP:  {< " " | "\t" | "\n" | "\r\n" | (<comentario> (<alfabetosintab>)+) >    }  